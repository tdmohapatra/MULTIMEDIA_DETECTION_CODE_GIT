@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced AI Vision System | Real-Time Detection</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6366f1;
            --primary-dark: #4f46e5;
            --secondary-color: #8b5cf6;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-bg: #0f172a;
            --darker-bg: #0a0f1c;
            --card-bg: #1e293b;
            --card-hover: #334155;
            --text-primary: #f1f5f9;
            --text-secondary: #94a3b8;
            --border-color: #334155;
        }

        body {
            background-color: var(--darker-bg);
            color: var(--text-primary);
            font-family: 'Segoe UI', system-ui, sans-serif;
            overflow-x: hidden;
        }

        .app-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 280px;
            background: var(--dark-bg);
            border-right: 1px solid var(--border-color);
            transition: all 0.3s ease;
            z-index: 1000;
            overflow-y: auto;
        }

        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
            background: var(--darker-bg);
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .brand-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .brand-text {
            font-weight: 700;
            font-size: 1.25rem;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .nav-section {
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        .nav-title {
            padding: 0.5rem 1.5rem;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: var(--text-secondary);
            font-weight: 600;
        }

        .nav-item {
            padding: 0.75rem 1.5rem;
            display: flex;
            align-items: center;
            gap: 12px;
            color: var(--text-secondary);
            text-decoration: none;
            transition: all 0.2s;
            border-left: 3px solid transparent;
        }

            .nav-item:hover, .nav-item.active {
                background: rgba(99, 102, 241, 0.1);
                color: var(--text-primary);
                border-left-color: var(--primary-color);
            }

            .nav-item i {
                width: 20px;
                text-align: center;
            }

        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-left: auto;
        }

        .status-online {
            background-color: var(--success-color);
            box-shadow: 0 0 6px var(--success-color);
        }

        .status-processing {
            background-color: var(--warning-color);
            box-shadow: 0 0 6px var(--warning-color);
            animation: pulse 1.5s infinite;
        }

        .status-offline {
            background-color: var(--danger-color);
        }

        @@keyframes pulse {
            0%

        {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }

        }

        .sidebar-footer {
            padding: 1.5rem;
            margin-top: auto;
            border-top: 1px solid var(--border-color);
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .top-nav {
            background: var(--dark-bg);
            border-bottom: 1px solid var(--border-color);
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .mobile-menu-btn {
            display: none;
            background: none;
            border: none;
            color: var(--text-primary);
            font-size: 1.25rem;
        }

        .page-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }

        .nav-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .control-btn {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 0.5rem 1rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s;
        }

            .control-btn:hover {
                background: var(--card-hover);
                transform: translateY(-2px);
            }

            .control-btn.primary {
                background: var(--primary-color);
                border-color: var(--primary-color);
            }

                .control-btn.primary:hover {
                    background: var(--primary-dark);
                }

            .control-btn.danger {
                background: var(--danger-color);
                border-color: var(--danger-color);
            }

            .control-btn.success {
                background: var(--success-color);
                border-color: var(--success-color);
            }

        .content-area {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
        }

        /* Card Styles */
        .card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
            }

        .card-header {
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: between;
            align-items: center;
        }

        .card-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .card-body {
            padding: 1.5rem;
        }

        /* Video Feed Styles */
        .video-container {
            position: relative;
            width: 100%;
            border-radius: 12px;
            overflow: hidden;
            background: #000;
        }

        #videoFeed, #processingCanvas {
            width: 100%;
            height: auto;
            display: block;
        }

        #videoOverlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .detection-marker {
            position: absolute;
            border: 2px solid;
            border-radius: 8px;
            pointer-events: none;
        }

        .face-marker {
            border-color: #10b981;
            box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
        }

        .eye-marker {
            border-color: #3b82f6;
            box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
        }

        .hand-marker {
            border-color: #f59e0b;
            box-shadow: 0 0 10px rgba(245, 158, 11, 0.5);
        }

        .text-marker {
            border-color: #8b5cf6;
            box-shadow: 0 0 10px rgba(139, 92, 246, 0.5);
        }

        /* Stats and Metrics */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
        }

        .stat-card {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 1.25rem;
            text-align: center;
            border-left: 4px solid var(--primary-color);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 1.5rem;
        }

        .stat-value {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        /* Progress Bars */
        .progress-container {
            margin-bottom: 1rem;
        }

        .progress-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .progress {
            height: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        /* Tabs */
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 1.5rem;
        }

        .tab-btn {
            padding: 0.75rem 1.5rem;
            background: none;
            border: none;
            color: var(--text-secondary);
            font-weight: 500;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }

            .tab-btn:hover {
                color: var(--text-primary);
            }

            .tab-btn.active {
                color: var(--primary-color);
                border-bottom-color: var(--primary-color);
            }

        .tab-pane {
            display: none;
        }

            .tab-pane.active {
                display: block;
            }

        /* Detection Badges */
        .detection-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .detection-badge {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 20px;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .face-badge {
            border-color: #10b981;
            color: #10b981;
        }

        .eye-badge {
            border-color: #3b82f6;
            color: #3b82f6;
        }

        .hand-badge {
            border-color: #f59e0b;
            color: #f59e0b;
        }

        .movement-badge {
            border-color: #ef4444;
            color: #ef4444;
        }

        .text-badge {
            border-color: #8b5cf6;
            color: #8b5cf6;
        }

        .expression-badge {
            border-color: #ec4899;
            color: #ec4899;
        }

        .gesture-badge {
            border-color: #06b6d4;
            color: #06b6d4;
        }

        /* Expression Analysis */
        .expression-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .expression-bar {
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            overflow: hidden;
            margin-top: 4px;
        }

        .expression-fill {
            height: 100%;
            border-radius: 3px;
            transition: width 0.5s ease;
        }

        /* Logs and Notifications */
        .log-container, .notification-container {
            max-height: 300px;
            overflow-y: auto;
        }

        .log-entry, .notification-item {
            padding: 0.75rem;
            border-bottom: 1px solid var(--border-color);
            font-size: 0.875rem;
        }

            .log-entry:last-child, .notification-item:last-child {
                border-bottom: none;
            }

        /* Responsive Design */
        @@media (max-width: 992px) {
            .sidebar

        {
            position: fixed;
            left: -280px;
            height: 100vh;
        }

        .sidebar.open {
            left: 0;
        }

        .mobile-menu-btn {
            display: block;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        }

        @@media (max-width: 768px) {
            .stats-grid

        {
            grid-template-columns: 1fr;
        }

        .nav-controls {
            flex-wrap: wrap;
        }

        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 6px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 3px;
        }

            ::-webkit-scrollbar-thumb:hover {
                background: var(--primary-dark);
            }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <div class="brand">
                    <div class="brand-icon">
                        <i class="fas fa-eye"></i>
                    </div>
                    <div class="brand-text">AI Vision System</div>
                </div>
            </div>

            <div class="nav-section">
                <div class="nav-title">Main Navigation</div>
                <a href="#" class="nav-item active">
                    <i class="fas fa-home"></i>
                    Dashboard
                </a>
                <a href="#" class="nav-item">
                    <i class="fas fa-chart-line"></i>
                    Analytics
                </a>
                <a href="#" class="nav-item">
                    <i class="fas fa-history"></i>
                    History
                </a>
                <a href="#" class="nav-item">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>

            <div class="nav-section">
                <div class="nav-title">Detection Modules</div>
                <a href="#" class="nav-item">
                    <i class="fas fa-user"></i>
                    Face Detection
                </a>
                <a href="#" class="nav-item">
                    <i class="fas fa-eye"></i>
                    Eye Tracking
                </a>
                <a href="#" class="nav-item">
                    <i class="fas fa-hand-paper"></i>
                    Hand Gestures
                </a>
                <a href="#" class="nav-item">
                    <i class="fas fa-running"></i>
                    Movement Analysis
                </a>
                <a href="#" class="nav-item">
                    <i class="fas fa-font"></i>
                    Text Recognition
                </a>
            </div>

            <div class="nav-section">
                <div class="nav-title">System Status</div>
                <div class="nav-item">
                    <i class="fas fa-microchip"></i>
                    AI Processing
                    <div class="status-indicator status-online" id="processingStatus"></div>
                </div>
                <div class="nav-item">
                    <i class="fas fa-video"></i>
                    Camera Feed
                    <div class="status-indicator status-online" id="cameraStatus"></div>
                </div>
                <div class="nav-item">
                    <i class="fas fa-server"></i>
                    System Health
                    <div class="status-indicator status-online" id="systemStatus"></div>
                </div>
            </div>

            <div class="sidebar-footer">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <small class="text-muted">Session ID:</small>
                    <small id="sessionIdDisplay" class="text-primary">Loading...</small>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    <small class="text-muted">Uptime:</small>
                    <small id="uptimeDisplay">00:00:00</small>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Top Navigation -->
            <div class="top-nav">
                <div class="d-flex align-items-center">
                    <button class="mobile-menu-btn me-3" id="mobileMenuBtn">
                        <i class="fas fa-bars"></i>
                    </button>
                    <h1 class="page-title">Real-Time Detection Dashboard</h1>
                </div>
                <div class="nav-controls">
                    <div class="d-flex align-items-center me-3">
                        <i class="fas fa-clock me-2 text-muted"></i>
                        <span id="currentTime">--:--:--</span>
                    </div>
                    <button class="control-btn success" id="startBtn">
                        <i class="fas fa-play"></i>
                        Start
                    </button>
                    <button class="control-btn danger" id="stopBtn" disabled>
                        <i class="fas fa-stop"></i>
                        Stop
                    </button>
                    <button class="control-btn primary" id="exportBtn">
                        <i class="fas fa-download"></i>
                        Export
                    </button>
                </div>
            </div>

            <!-- Content Area -->
            <div class="content-area">
                <!-- Stats Overview -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(16, 185, 129, 0.2); color: #10b981;">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="stat-value" id="faceCount">0</div>
                            <div class="stat-label">Faces Detected</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(59, 130, 246, 0.2); color: #3b82f6;">
                                <i class="fas fa-eye"></i>
                            </div>
                            <div class="stat-value" id="eyeCount">0</div>
                            <div class="stat-label">Eyes Tracked</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(245, 158, 11, 0.2); color: #f59e0b;">
                                <i class="fas fa-hand-paper"></i>
                            </div>
                            <div class="stat-value" id="handCount">0</div>
                            <div class="stat-label">Hands Detected</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(139, 92, 246, 0.2); color: #8b5cf6;">
                                <i class="fas fa-project-diagram"></i>
                            </div>
                            <div class="stat-value" id="totalFrames">0</div>
                            <div class="stat-label">Frames Processed</div>
                        </div>
                    </div>
                </div>

                <!-- Main Content Row -->
                <div class="row">
                    <!-- Left Column: Video Feed -->
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">
                                    <i class="fas fa-video text-primary"></i>
                                    Live Camera Feed
                                </h3>
                                <div class="d-flex align-items-center">
                                    <span class="me-2 text-muted" id="liveFps">0 FPS</span>
                                    <div class="status-indicator status-online"></div>
                                </div>
                            </div>
                            <div class="card-body p-0">
                                <div class="video-container">
                                    <video id="videoFeed" autoplay muted playsinline></video>
                                    <canvas id="processingCanvas"></canvas>
                                    <div id="videoOverlay"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Detection Controls -->
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">
                                    <i class="fas fa-sliders-h text-warning"></i>
                                    Detection Controls
                                </h3>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Processing Rate</label>
                                            <div class="d-flex align-items-center">
                                                <input type="range" class="form-range flex-grow-1 me-3" id="fpsSlider" min="5" max="60" value="30">
                                                <span class="text-nowrap"><span id="fpsValue">30</span> FPS</span>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Movement Sensitivity</label>
                                            <input type="range" class="form-range" id="sensitivityRange" min="1" max="100" value="50">
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Active Detections</label>
                                            <div class="detection-badges" id="activeDetections">
                                                <span class="text-muted">No active detections</span>
                                            </div>
                                        </div>
                                        <div class="progress-container">
                                            <div class="progress-label">
                                                <span>Movement Level</span>
                                                <span id="movementValue">0%</span>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar" id="movementMeter" style="width: 0%; background: linear-gradient(90deg, #4cc9f0, #4895ef);"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column: Analytics -->
                    <div class="col-lg-4">
                        <!-- System Status -->
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">
                                    <i class="fas fa-heartbeat text-danger"></i>
                                    System Status
                                </h3>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>AI Processing</span>
                                        <span id="processingStatusText">IDLE</span>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar" style="width: 75%; background-color: #10b981;"></div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>Camera Stability</span>
                                        <span id="stabilityValue">100%</span>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar" id="stabilityMeter" style="width: 100%; background-color: #10b981;"></div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>Memory Usage</span>
                                        <span>42%</span>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar" style="width: 42%; background-color: #3b82f6;"></div>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>CPU Load</span>
                                        <span>28%</span>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar" style="width: 28%; background-color: #f59e0b;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Notifications -->
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">
                                    <i class="fas fa-bell text-warning"></i>
                                    Notifications
                                    <span class="badge bg-warning ms-2" id="notificationCount">0</span>
                                </h3>
                                <button class="btn btn-sm btn-outline-secondary">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                            </div>
                            <div class="card-body p-0">
                                <div class="notification-container" id="notifications">
                                    <div class="text-center text-muted py-4">
                                        <i class="fas fa-bell-slash fa-2x mb-2"></i>
                                        <p>No notifications</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tabs for Detailed Analysis -->
                <div class="card mt-4">
                    <div class="card-header">
                        <div class="tabs">
                            <button class="tab-btn active" data-tab="expressions">
                                <i class="fas fa-smile me-2"></i>Expressions
                            </button>
                            <button class="tab-btn" data-tab="gestures">
                                <i class="fas fa-hands me-2"></i>Gestures
                            </button>
                            <button class="tab-btn" data-tab="vitals">
                                <i class="fas fa-heart me-2"></i>Vital Metrics
                            </button>
                            <button class="tab-btn" data-tab="logs">
                                <i class="fas fa-list me-2"></i>System Logs
                                <span class="badge bg-primary ms-2" id="logCount">0</span>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Expressions Tab -->
                        <div class="tab-pane active" id="expressions-tab">
                            <div id="expressionAnalysis">
                                <div class="text-center text-muted py-5">
                                    <i class="fas fa-user fa-3x mb-3"></i>
                                    <p>No face detected for expression analysis</p>
                                </div>
                            </div>
                        </div>

                        <!-- Gestures Tab -->
                        <div class="tab-pane" id="gestures-tab">
                            <div class="row">
                                <div class="col-md-6">
                                    <h5 class="text-white mb-3">Current Gestures</h5>
                                    <div id="gestureAnalysis">
                                        <div class="text-center text-muted py-5">
                                            <i class="fas fa-hand fa-3x mb-3"></i>
                                            <p>No hand gestures detected</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <h5 class="text-white mb-3">Gesture History</h5>
                                    <div class="log-container" id="gestureHistory">
                                        <div class="text-center text-muted py-4">
                                            <p>No gesture history</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Vital Metrics Tab -->
                        <div class="tab-pane" id="vitals-tab">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <h5 class="text-white mb-3">Vital Indicators</h5>
                                        <div class="mb-3">
                                            <div class="d-flex justify-content-between mb-1">
                                                <span>Heart Rate</span>
                                                <span class="metric-value text-success" id="heartRate">-- BPM</span>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar" style="width: 65%; background-color: #ef4444;"></div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="d-flex justify-content-between mb-1">
                                                <span>Stress Level</span>
                                                <span class="metric-value text-success" id="stressLevel">Low</span>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar" style="width: 30%; background-color: #10b981;"></div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="d-flex justify-content-between mb-1">
                                                <span>Attention Score</span>
                                                <span class="metric-value text-warning" id="attentionScore">--%</span>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar" style="width: 75%; background-color: #f59e0b;"></div>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="d-flex justify-content-between mb-1">
                                                <span>Engagement Level</span>
                                                <span class="metric-value text-info" id="engagementLevel">--</span>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar" style="width: 60%; background-color: #3b82f6;"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <h5 class="text-white mb-3">Activity Timeline</h5>
                                    <canvas id="activityTimeline" height="250"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- System Logs Tab -->
                        <div class="tab-pane" id="logs-tab">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="text-white mb-0">System Logs</h5>
                                <button class="control-btn" id="clearLogsBtn">
                                    <i class="fas fa-trash"></i>
                                    Clear Logs
                                </button>
                            </div>
                            <div class="log-container" id="logs">
                                <div class="log-entry">
                                    <i class="fas fa-info-circle text-info me-2"></i>
                                    <span class="text-muted">[--:--:--]</span>
                                    <span class="ms-2">System initialized and ready</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/js/realtime-detection.js"></script>
    <script>
        // Initialize the detection system when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            window.detectionSystem = new RealTimeDetection();

            // Update session ID display
            document.getElementById('sessionIdDisplay').textContent =
                window.detectionSystem.sessionId.substring(0, 12) + '...';

            // Uptime counter
            setInterval(() => {
                const uptime = Date.now() - window.detectionSystem.sessionStartTime;
                const hours = Math.floor(uptime / 3600000);
                const minutes = Math.floor((uptime % 3600000) / 60000);
                const seconds = Math.floor((uptime % 60000) / 1000);
                document.getElementById('uptimeDisplay').textContent =
                    `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }, 1000);
        });
    </script>
</body>
</html> *@


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced AI Vision System | Real-Time Detection</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #6366f1;
            --primary-dark: #4f46e5;
            --secondary-color: #8b5cf6;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-bg: #0f172a;
            --darker-bg: #0a0f1c;
            --card-bg: #1e293b;
            --card-hover: #334155;
            --text-primary: #f1f5f9;
            --text-secondary: #94a3b8;
            --border-color: #334155;
        }

        body {
            background-color: var(--darker-bg);
            color: var(--text-primary);
            font-family: 'Segoe UI', system-ui, sans-serif;
            overflow-x: hidden;
        }

        .app-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 280px;
            background: var(--dark-bg);
            border-right: 1px solid var(--border-color);
            transition: all 0.3s ease;
            z-index: 1000;
            overflow-y: auto;
            position: fixed;
            height: 100vh;
        }

        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
            background: var(--darker-bg);
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .brand-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .brand-text {
            font-weight: 700;
            font-size: 1.25rem;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .nav-section {
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        .nav-title {
            padding: 0.5rem 1.5rem;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: var(--text-secondary);
            font-weight: 600;
        }

        .nav-item {
            padding: 0.75rem 1.5rem;
            display: flex;
            align-items: center;
            gap: 12px;
            color: var(--text-secondary);
            text-decoration: none;
            transition: all 0.2s;
            border-left: 3px solid transparent;
            cursor: pointer;
        }

            .nav-item:hover, .nav-item.active {
                background: rgba(99, 102, 241, 0.1);
                color: var(--text-primary);
                border-left-color: var(--primary-color);
            }

            .nav-item i {
                width: 20px;
                text-align: center;
            }

        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-left: auto;
        }

        .status-online {
            background-color: var(--success-color);
            box-shadow: 0 0 6px var(--success-color);
        }

        .status-processing {
            background-color: var(--warning-color);
            box-shadow: 0 0 6px var(--warning-color);
            animation: pulse 1.5s infinite;
        }

        .status-offline {
            background-color: var(--danger-color);
        }

        @@keyframes pulse {
            0%

        {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }

        }

        .sidebar-footer {
            padding: 1.5rem;
            margin-top: auto;
            border-top: 1px solid var(--border-color);
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            margin-left: 280px;
            width: calc(100% - 280px);
        }

        .top-nav {
            background: var(--dark-bg);
            border-bottom: 1px solid var(--border-color);
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .mobile-menu-btn {
            display: none;
            background: none;
            border: none;
            color: var(--text-primary);
            font-size: 1.25rem;
        }

        .page-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }

        .nav-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .control-btn {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 0.5rem 1rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s;
            cursor: pointer;
        }

            .control-btn:hover {
                background: var(--card-hover);
                transform: translateY(-2px);
            }

            .control-btn.primary {
                background: var(--primary-color);
                border-color: var(--primary-color);
            }

                .control-btn.primary:hover {
                    background: var(--primary-dark);
                }

            .control-btn.danger {
                background: var(--danger-color);
                border-color: var(--danger-color);
            }

            .control-btn.success {
                background: var(--success-color);
                border-color: var(--success-color);
            }

        .content-area {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
        }

        /* Card Styles */
 /*        .card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
        } */

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
            }

        /* Card Header Styles - Theme Compatible */
        .card {
            background: var(--card-bg);
            border-radius: 10px;
            border: 1px solid var(--border-color);
            backdrop-filter: blur(10px);
            margin-bottom: 20px;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .card-header {
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255, 255, 255, 0.05);
            color: var(--text);
            transition: all 0.3s ease;
        }

            .card-header h3 {
                margin: 0;
                font-weight: 600;
                color: var(--primary);
                font-family: 'Orbitron', sans-serif;
            }

            .card-header .actions {
                display: flex;
                gap: 10px;
            }

            .card-header .btn {
                background: transparent;
                border: 1px solid var(--border-color);
                color: var(--text);
                padding: 6px 12px;
                border-radius: 5px;
                cursor: pointer;
                transition: all 0.3s ease;
                font-size: 0.9rem;
            }

                .card-header .btn:hover {
                    background: var(--primary);
                    color: var(--dark);
                    border-color: var(--primary);
                }

        .card-body {
            padding: 1.5rem;
            color: var(--text);
        }
/* 
        .card-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .card-body {
            padding: 1.5rem;
        }
 */
        /* Video Feed Styles */
        .video-container {
            position: relative;
            width: 100%;
            border-radius: 12px;
            overflow: hidden;
            background: #000;
            aspect-ratio: 16/9;
        }

        #videoFeed, #processingCanvas {
            width: 100%;
            height: 100%;
            display: block;
            object-fit: cover;
        }

        #videoOverlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .detection-marker {
            position: absolute;
            border: 2px solid;
            border-radius: 8px;
            pointer-events: none;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .face-marker {
            border-color: #10b981;
            box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
        }

        .eye-marker {
            border-color: #3b82f6;
            box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
        }

        .hand-marker {
            border-color: #f59e0b;
            box-shadow: 0 0 10px rgba(245, 158, 11, 0.5);
        }

        .text-marker {
            border-color: #8b5cf6;
            box-shadow: 0 0 10px rgba(139, 92, 246, 0.5);
        }

        .marker-label {
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 2px 8px;
            font-size: 10px;
            border-radius: 4px;
            margin-top: -20px;
            margin-left: -2px;
            white-space: nowrap;
        }

        /* Stats and Metrics */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
        }

        .stat-card {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 1.25rem;
            text-align: center;
            border-left: 4px solid var(--primary-color);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 1.5rem;
        }

        .stat-value {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        /* Progress Bars */
        .progress-container {
            margin-bottom: 1rem;
        }

        .progress-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .progress {
            height: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        /* Tabs */
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }

        .tab-btn {
            padding: 0.75rem 1.5rem;
            background: none;
            border: none;
            color: var(--text-secondary);
            font-weight: 500;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
            cursor: pointer;
        }

            .tab-btn:hover {
                color: var(--text-primary);
            }

            .tab-btn.active {
                color: var(--primary-color);
                border-bottom-color: var(--primary-color);
            }

        .tab-pane {
            display: none;
        }

            .tab-pane.active {
                display: block;
            }

        /* Detection Badges */
        .detection-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .detection-badge {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 20px;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .face-badge {
            border-color: #10b981;
            color: #10b981;
        }

        .eye-badge {
            border-color: #3b82f6;
            color: #3b82f6;
        }

        .hand-badge {
            border-color: #f59e0b;
            color: #f59e0b;
        }

        .movement-badge {
            border-color: #ef4444;
            color: #ef4444;
        }

        .text-badge {
            border-color: #8b5cf6;
            color: #8b5cf6;
        }

        .expression-badge {
            border-color: #ec4899;
            color: #ec4899;
        }

        .gesture-badge {
            border-color: #06b6d4;
            color: #06b6d4;
        }

        /* Expression Analysis */
        .expression-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .expression-bar {
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            overflow: hidden;
            margin-top: 4px;
        }

        .expression-fill {
            height: 100%;
            border-radius: 3px;
            transition: width 0.5s ease;
        }

        /* Logs and Notifications */
        .log-container, .notification-container {
            max-height: 300px;
            overflow-y: auto;
        }

        .log-entry, .notification-item {
            padding: 0.75rem;
            border-bottom: 1px solid var(--border-color);
            font-size: 0.875rem;
        }

            .log-entry:last-child, .notification-item:last-child {
                border-bottom: none;
            }

        /* Responsive Design */
        @@media (max-width: 1200px) {
            .main-content

        {
            margin-left: 0;
            width: 100%;
        }

        .sidebar {
            left: -280px;
        }

            .sidebar.open {
                left: 0;
            }

        .mobile-menu-btn {
            display: block;
        }

        }

        @@media (max-width: 992px) {
            .stats-grid

        {
            grid-template-columns: repeat(2, 1fr);
        }

        }

        @@media (max-width: 768px) {
            .stats-grid

        {
            grid-template-columns: 1fr;
        }

        .nav-controls {
            flex-wrap: wrap;
        }

        .tabs {
            flex-direction: column;
        }

        .tab-btn {
            width: 100%;
            text-align: left;
        }

        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 6px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 3px;
        }

            ::-webkit-scrollbar-thumb:hover {
                background: var(--primary-dark);
            }

        /* Loading States */
        .loading {
            opacity: 0.7;
            pointer-events: none;
        }

        .spinner-border-sm {
            width: 1rem;
            height: 1rem;
        }

        /* Camera Permission Styles */
        .permission-prompt {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            text-align: center;
            background: var(--card-bg);
            border-radius: 12px;
            border: 2px dashed var(--border-color);
        }

        .permission-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: var(--primary-color);
        }

        /* Gesture Visualization */
        .gesture-visualization {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-top: 1rem;
        }

        .gesture-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 1rem;
            flex: 1;
            min-width: 150px;
        }

        .gesture-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            color: var(--warning-color);
        }

        .text-muted {
            color: var(--text-muted) !important;
            transition: color 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <div class="brand">
                    <div class="brand-icon">
                        <i class="fas fa-eye"></i>
                    </div>
                    <div class="brand-text">AI Vision System</div>
                </div>
            </div>

            <div class="nav-section">
                <div class="nav-title">Main Navigation</div>
                <a class="nav-item active" data-tab="dashboard">
                    <i class="fas fa-home"></i>
                    Dashboard
                </a>
                <a class="nav-item" data-tab="analytics">
                    <i class="fas fa-chart-line"></i>
                    Analytics
                </a>
                <a class="nav-item" data-tab="history">
                    <i class="fas fa-history"></i>
                    History
                </a>
                <a class="nav-item" data-tab="settings">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>

            <div class="nav-section">
                <div class="nav-title">Detection Modules</div>
                <a class="nav-item">
                    <i class="fas fa-user"></i>
                    Face Detection
                </a>
                <a class="nav-item">
                    <i class="fas fa-eye"></i>
                    Eye Tracking
                </a>
                <a class="nav-item">
                    <i class="fas fa-hand-paper"></i>
                    Hand Gestures
                </a>
                <a class="nav-item">
                    <i class="fas fa-running"></i>
                    Movement Analysis
                </a>
                <a class="nav-item">
                    <i class="fas fa-font"></i>
                    Text Recognition
                </a>
            </div>

            <div class="nav-section">
                <div class="nav-title">System Status</div>
                <div class="nav-item">
                    <i class="fas fa-microchip"></i>
                    AI Processing
                    <div class="status-indicator status-online" id="processingStatus"></div>
                </div>
                <div class="nav-item">
                    <i class="fas fa-video"></i>
                    Camera Feed
                    <div class="status-indicator status-online" id="cameraStatus"></div>
                </div>
                <div class="nav-item">
                    <i class="fas fa-server"></i>
                    System Health
                    <div class="status-indicator status-online" id="systemStatus"></div>
                </div>
            </div>

            <div class="sidebar-footer">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <small class="text-muted">Session ID:</small>
                    <small id="sessionIdDisplay" class="text-primary">Loading...</small>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    <small class="text-muted">Uptime:</small>
                    <small id="uptimeDisplay">00:00:00</small>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Top Navigation -->
            <div class="top-nav">
                <div class="d-flex align-items-center">
                    <button class="mobile-menu-btn me-3" id="mobileMenuBtn">
                        <i class="fas fa-bars"></i>
                    </button>
                    <h1 class="page-title">Real-Time Detection Dashboard</h1>
                </div>
                <div class="nav-controls">
                    <div class="d-flex align-items-center me-3">
                        <i class="fas fa-clock me-2 text-muted"></i>
                        <span id="currentTime">--:--:--</span>
                    </div>
                    <button class="control-btn success" id="startBtn">
                        <i class="fas fa-play"></i>
                        Start
                    </button>
                    <button class="control-btn danger" id="stopBtn" disabled>
                        <i class="fas fa-stop"></i>
                        Stop
                    </button>
                    <button class="control-btn primary" id="exportBtn">
                        <i class="fas fa-download"></i>
                        Export
                    </button>
                </div>
            </div>

            <!-- Content Area -->
            <div class="content-area">
                <!-- Stats Overview -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(16, 185, 129, 0.2); color: #10b981;">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="stat-value" id="faceCount">0</div>
                            <div class="stat-label">Faces Detected</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(59, 130, 246, 0.2); color: #3b82f6;">
                                <i class="fas fa-eye"></i>
                            </div>
                            <div class="stat-value" id="eyeCount">0</div>
                            <div class="stat-label">Eyes Tracked</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(245, 158, 11, 0.2); color: #f59e0b;">
                                <i class="fas fa-hand-paper"></i>
                            </div>
                            <div class="stat-value" id="handCount">0</div>
                            <div class="stat-label">Hands Detected</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(139, 92, 246, 0.2); color: #8b5cf6;">
                                <i class="fas fa-project-diagram"></i>
                            </div>
                            <div class="stat-value" id="totalFrames">0</div>
                            <div class="stat-label">Frames Processed</div>
                        </div>
                    </div>
                </div>

                <!-- Main Content Row -->
                <div class="row">
                    <!-- Left Column: Video Feed and Controls -->
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">
                                    <i class="fas fa-video text-primary"></i>
                                    Live Camera Feed
                                </h3>
                                <div class="d-flex align-items-center">
                                    <span class="me-2 text-muted" id="liveFps">0 FPS</span>
                                    <div class="status-indicator status-online"></div>
                                </div>
                            </div>
                            <div class="card-body p-0">
                                <div class="video-container">
                                    <video id="videoFeed" autoplay muted playsinline></video>
                                    <canvas id="processingCanvas"></canvas>
                                    <div id="videoOverlay"></div>
                                </div>
                                <div id="cameraPermissionPrompt" class="permission-prompt" style="display: none;">
                                    <div class="permission-icon">
                                        <i class="fas fa-camera"></i>
                                    </div>
                                    <h4>Camera Access Required</h4>
                                    <p class="text-muted">Please allow camera access to enable real-time detection</p>
                                    <button class="control-btn primary mt-3" id="requestCameraBtn">
                                        <i class="fas fa-camera"></i>
                                        Enable Camera
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Detection Controls and Analytics -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h3 class="card-title">
                                            <i class="fas fa-sliders-h text-warning"></i>
                                            Detection Controls
                                        </h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label class="form-label">Processing Rate</label>
                                            <div class="d-flex align-items-center">
                                                <input type="range" class="form-range flex-grow-1 me-3" id="fpsSlider" min="5" max="60" value="30">
                                                <span class="text-nowrap"><span id="fpsValue">30</span> FPS</span>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Movement Sensitivity</label>
                                            <input type="range" class="form-range" id="sensitivityRange" min="1" max="100" value="50">
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Active Detections</label>
                                            <div class="detection-badges" id="activeDetections">
                                                <span class="text-muted">No active detections</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h3 class="card-title">
                                            <i class="fas fa-chart-bar text-info"></i>
                                            Movement Analysis
                                        </h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="progress-container">
                                            <div class="progress-label">
                                                <span>Movement Level</span>
                                                <span id="movementValue">0%</span>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar" id="movementMeter" style="width: 0%; background: linear-gradient(90deg, #4cc9f0, #4895ef);"></div>
                                            </div>
                                        </div>
                                        <div class="progress-container">
                                            <div class="progress-label">
                                                <span>Camera Stability</span>
                                                <span id="stabilityValue">100%</span>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar" id="stabilityMeter" style="width: 100%; background-color: #10b981;"></div>
                                            </div>
                                        </div>
                                        <div class="mt-4">
                                            <h5 class="text-white mb-3">Vital Metrics</h5>
                                            <div class="row">
                                                <div class="col-6">
                                                    <div class="text-center p-2 bg-dark rounded mb-2">
                                                        <div class="text-success fw-bold" id="heartRate">-- BPM</div>
                                                        <small class="text-muted">Heart Rate</small>
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="text-center p-2 bg-dark rounded mb-2">
                                                        <div class="text-warning fw-bold" id="stressLevel">Low</div>
                                                        <small class="text-muted">Stress Level</small>
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="text-center p-2 bg-dark rounded">
                                                        <div class="text-info fw-bold" id="attentionScore">--%</div>
                                                        <small class="text-muted">Attention</small>
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="text-center p-2 bg-dark rounded">
                                                        <div class="text-primary fw-bold" id="engagementLevel">--</div>
                                                        <small class="text-muted">Engagement</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column: Analytics and Logs -->
                    <div class="col-lg-4">
                        <!-- System Status -->
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">
                                    <i class="fas fa-heartbeat text-danger"></i>
                                    System Status
                                </h3>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>AI Processing</span>
                                        <span id="processingStatusText">IDLE</span>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar" style="width: 75%; background-color: #10b981;"></div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>Memory Usage</span>
                                        <span>42%</span>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar" style="width: 42%; background-color: #3b82f6;"></div>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>CPU Load</span>
                                        <span>28%</span>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar" style="width: 28%; background-color: #f59e0b;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Notifications -->
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">
                                    <i class="fas fa-bell text-warning"></i>
                                    Notifications
                                    <span class="badge bg-warning ms-2" id="notificationCount">0</span>
                                </h3>
                                <button class="btn btn-sm btn-outline-secondary">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                            </div>
                            <div class="card-body p-0">
                                <div class="notification-container" id="notifications">
                                    <div class="text-center text-muted py-4">
                                        <i class="fas fa-bell-slash fa-2x mb-2"></i>
                                        <p>No notifications</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- System Logs -->
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">
                                    <i class="fas fa-list text-primary"></i>
                                    System Logs
                                    <span class="badge bg-primary ms-2" id="logCount">0</span>
                                </h3>
                                <button class="control-btn" id="clearLogsBtn">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="card-body p-0">
                                <div class="log-container" id="logs">
                                    <div class="log-entry">
                                        <i class="fas fa-info-circle text-info me-2"></i>
                                        <span class="text-muted">[--:--:--]</span>
                                        <span class="ms-2">System initialized and ready</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Detailed Analysis Tabs -->
                <div class="card mt-4">
                    <div class="card-header">
                        <div class="tabs">
                            <button class="tab-btn active" data-tab="expressions">
                                <i class="fas fa-smile me-2"></i>Expressions
                            </button>
                            <button class="tab-btn" data-tab="gestures">
                                <i class="fas fa-hands me-2"></i>Gestures
                            </button>
                            <button class="tab-btn" data-tab="activity">
                                <i class="fas fa-chart-line me-2"></i>Activity Timeline
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Expressions Tab -->
                        <div class="tab-pane active" id="expressions-tab">
                            <div id="expressionAnalysis">
                                <div class="text-center text-muted py-5">
                                    <i class="fas fa-user fa-3x mb-3"></i>
                                    <p>No face detected for expression analysis</p>
                                </div>
                            </div>
                        </div>

                        <!-- Gestures Tab -->
                        <div class="tab-pane" id="gestures-tab">
                            <div class="row">
                                <div class="col-md-6">
                                    <h5 class="text-white mb-3">Current Gestures</h5>
                                    <div id="gestureAnalysis">
                                        <div class="text-center text-muted py-5">
                                            <i class="fas fa-hand fa-3x mb-3"></i>
                                            <p>No hand gestures detected</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <h5 class="text-white mb-3">Gesture History</h5>
                                    <div class="log-container" id="gestureHistory">
                                        <div class="text-center text-muted py-4">
                                            <p>No gesture history</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Activity Timeline Tab -->
                        <div class="tab-pane" id="activity-tab">
                            <div class="row">
                                <div class="col-md-8">
                                    <h5 class="text-white mb-3">Activity Timeline</h5>
                                    <canvas id="activityTimeline" height="250"></canvas>
                                </div>
                                <div class="col-md-4">
                                    <h5 class="text-white mb-3">Detection Summary</h5>
                                    <div class="p-3 bg-dark rounded">
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Total Faces Detected:</span>
                                            <span class="fw-bold" id="summaryFaces">0</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Total Gestures:</span>
                                            <span class="fw-bold" id="summaryGestures">0</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Peak Movement:</span>
                                            <span class="fw-bold" id="summaryMovement">0%</span>
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span>Session Duration:</span>
                                            <span class="fw-bold" id="summaryDuration">00:00:00</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Main Detection System
        class RealTimeDetection {
            constructor() {
                this.video = document.getElementById('videoFeed');
                this.canvas = document.getElementById('processingCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.isRunning = false;
                this.sessionId = this.generateSessionId();
                this.processingInterval = null;
                this.statsInterval = null;
                this.fpsInterval = null;
                this.notificationCount = 0;
                this.logCount = 0;
                this.activeDetections = new Set();
                this.processingRate = 33; // ~30 FPS default
                this.frameCount = 0;
                this.lastFpsUpdate = 0;
                this.currentFps = 0;
                this.sessionStartTime = Date.now();
                this.simulationWarningShown = false;

                // Detection tracking
                this.faceExpressions = [];
                this.handGestures = [];
                this.eyeMovements = [];
                this.capturedTexts = [];
                this.vitalMetrics = {};
                this.activityHistory = [];
                this.cameraStability = 100;

                this.initializeEventListeners();
                this.initializeSession();
                this.initializeCharts();
                this.updateUIState(false);
                this.updateTime();
                setInterval(() => this.updateTime(), 1000);
            }

            generateSessionId() {
                return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }

            async initializeSession() {
                try {
                    const response = await fetch(`/api/detection/initialize/${this.sessionId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    if (response.ok) {
                        this.addLog('Advanced AI session initialized successfully', 'success');
                        this.updateSystemStatus('ready');
                    } else {
                        this.addLog('Failed to initialize session, running in demo mode', 'warning');
                        this.updateSystemStatus('ready');
                    }
                } catch (error) {
                    this.addLog('Error initializing advanced session: ' + error.message + ' - Running in demo mode', 'warning');
                    this.updateSystemStatus('ready');
                }
            }

            initializeEventListeners() {
                // Control buttons
                document.getElementById('startBtn').addEventListener('click', () => this.startDetection());
                document.getElementById('stopBtn').addEventListener('click', () => this.stopDetection());
                document.getElementById('exportBtn').addEventListener('click', () => this.exportData());
                document.getElementById('clearLogsBtn').addEventListener('click', () => this.clearLogs());
                document.getElementById('requestCameraBtn').addEventListener('click', () => this.requestCameraPermission());

                // Frame rate control
                const fpsSlider = document.getElementById('fpsSlider');
                if (fpsSlider) {
                    fpsSlider.addEventListener('input', (e) => {
                        const fps = parseInt(e.target.value);
                        document.getElementById('fpsValue').textContent = fps;
                        this.updateProcessingRate(fps);
                    });
                }

                // Mobile menu
                const mobileMenuBtn = document.getElementById('mobileMenuBtn');
                if (mobileMenuBtn) {
                    mobileMenuBtn.addEventListener('click', () => {
                        document.querySelector('.sidebar').classList.toggle('open');
                    });
                }

                // Tab system
                this.initializeTabSystem();
            }

            initializeTabSystem() {
                const tabBtns = document.querySelectorAll('.tab-btn');
                tabBtns.forEach(btn => {
                    btn.addEventListener('click', () => {
                        // Remove active class from all buttons and panes
                        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
                        document.querySelectorAll('.tab-pane').forEach(p => p.classList.remove('active'));

                        // Add active class to clicked button and corresponding pane
                        btn.classList.add('active');
                        const tabId = btn.getAttribute('data-tab') + '-tab';
                        document.getElementById(tabId).classList.add('active');
                    });
                });
            }

            initializeCharts() {
                // Initialize activity timeline
                const activityCtx = document.getElementById('activityTimeline');
                if (activityCtx) {
                    this.activityTimeline = new Chart(activityCtx, {
                        type: 'line',
                        data: {
                            labels: Array.from({ length: 20 }, (_, i) => i + 1),
                            datasets: [{
                                label: 'Movement Level',
                                data: Array.from({ length: 20 }, () => Math.random() * 100),
                                borderColor: '#6366f1',
                                backgroundColor: 'rgba(99, 102, 241, 0.1)',
                                tension: 0.4,
                                fill: true
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                x: {
                                    grid: {
                                        color: 'rgba(255, 255, 255, 0.1)'
                                    },
                                    ticks: {
                                        color: '#94a3b8'
                                    }
                                },
                                y: {
                                    grid: {
                                        color: 'rgba(255, 255, 255, 0.1)'
                                    },
                                    ticks: {
                                        color: '#94a3b8'
                                    }
                                }
                            }
                        }
                    });
                }
            }

            updateProcessingRate(fps) {
                this.processingRate = Math.floor(1000 / fps);
                this.restartProcessingIfRunning();
            }

            restartProcessingIfRunning() {
                if (this.isRunning) {
                    clearInterval(this.processingInterval);
                    this.processingInterval = setInterval(() => this.processFrame(), this.processingRate);
                    this.addLog(`Processing rate updated to ${Math.floor(1000 / this.processingRate)} FPS`, 'info');
                }
            }

            updateTime() {
                const now = new Date();
                const timeElement = document.getElementById('currentTime');
                if (timeElement) {
                    timeElement.textContent = now.toLocaleTimeString('en-US', { hour12: false });
                }
            }

            async startDetection() {
                try {
                    this.updateSystemStatus('initializing');
                    this.updateCameraStatus('connecting');

                    const stream = await navigator.mediaDevices.getUserMedia({
                        video: {
                            width: { ideal: 1280 },
                            height: { ideal: 720 },
                            frameRate: { ideal: 30 }
                        }
                    });

                    this.video.srcObject = stream;

                    this.video.onloadeddata = () => {
                        this.canvas.width = this.video.videoWidth;
                        this.canvas.height = this.video.videoHeight;

                        this.isRunning = true;
                        this.updateUIState(true);
                        this.updateSystemStatus('running');
                        this.updateCameraStatus('connected');
                        this.updateProcessingStatus('active');

                        this.processingInterval = setInterval(() => this.processFrame(), this.processingRate);
                        this.statsInterval = setInterval(() => this.updateStats(), 1000);
                        this.fpsInterval = setInterval(() => this.updateFPS(), 1000);

                        this.addNotification('Advanced AI Vision System Activated', 'success');
                        this.addLog('High-resolution camera initialized - Starting advanced analysis', 'info');

                        // Hide camera permission prompt
                        document.getElementById('cameraPermissionPrompt').style.display = 'none';
                    };

                } catch (error) {
                    this.addNotification('Camera Access Denied: ' + error.message, 'error');
                    this.addLog('Camera initialization failed: ' + error.message, 'error');
                    this.updateSystemStatus('error');
                    this.updateCameraStatus('error');

                    // Show camera permission prompt
                    document.getElementById('cameraPermissionPrompt').style.display = 'flex';

                    // Start simulation mode if camera fails
                    this.startSimulationMode();
                }
            }

            requestCameraPermission() {
                this.startDetection();
            }

            startSimulationMode() {
                this.addLog('Starting simulation mode with sample data', 'warning');
                this.isRunning = true;
                this.updateUIState(true);
                this.updateSystemStatus('running');
                this.updateProcessingStatus('active');

                this.processingInterval = setInterval(() => this.processSimulatedFrame(), this.processingRate);
                this.statsInterval = setInterval(() => this.updateSimulatedStats(), 1000);
                this.fpsInterval = setInterval(() => this.updateFPS(), 1000);
            }

            async processFrame() {
                if (!this.isRunning || this.video.readyState !== this.video.HAVE_ENOUGH_DATA) {
                    return;
                }

                try {
                    this.frameCount++;

                    // Draw video frame
                    this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);

                    // Process with MediaPipe Hands if loaded
                    if (this.mediaPipeLoaded && this.hands) {
                        await this.hands.send({ image: this.video });
                        this.drawHandLandmarks();
                    } else {
                        // Fallback to simulated hand detection
                        this.processSimulatedHands();
                    }

                    // Update statistics
                    const stats = {
                        facesDetected: 0,
                        eyesDetected: 0,
                        handsDetected: this.handResults?.multiHandLandmarks?.length || 0,
                        totalFramesProcessed: this.frameCount,
                        currentMovementLevel: this.calculateMovementLevel(),
                        movementDetected: this.handResults?.multiHandLandmarks?.length > 0,
                        textDetected: false,
                        expressionsDetected: false,
                        gesturesDetected: this.handGestures?.length > 0
                    };

                    const result = {
                        stats: stats,
                        handGestures: this.handGestures || [],
                        vitalMetrics: this.estimateVitalMetrics(),
                        capturedText: null
                    };

                    this.updateDisplay(result);

                } catch (error) {
                    console.error('Frame processing error:', error);
                    this.processSimulatedFrame();
                }
            }

            processSimulatedHands() {
                // Basic simulation when MediaPipe is not available
                if (Math.random() > 0.7) {
                    this.handGestures = [{
                        type: ['Open Hand', 'Closed Fist', 'Thumbs Up'][Math.floor(Math.random() * 3)],
                        confidence: 0.5 + Math.random() * 0.5,
                        handedness: ['Left', 'Right'][Math.floor(Math.random() * 2)],
                        meaning: 'Simulated gesture'
                    }];
                } else {
                    this.handGestures = [];
                }
            }

            calculateMovementLevel() {
                if (!this.handResults?.multiHandLandmarks) return Math.random() * 30;

                let totalMovement = 0;
                this.handResults.multiHandLandmarks.forEach(landmarks => {
                    landmarks.forEach(landmark => {
                        totalMovement += Math.sqrt(landmark.x ** 2 + landmark.y ** 2);
                    });
                });

                return Math.min(100, totalMovement * 10);
            }

            estimateVitalMetrics() {
                const movementLevel = this.calculateMovementLevel();

                return {
                    heartRate: Math.floor(60 + movementLevel / 3),
                    stressLevel: movementLevel > 70 ? 'High' : movementLevel > 40 ? 'Medium' : 'Low',
                    attentionScore: Math.floor(30 + movementLevel / 1.5),
                    engagementLevel: movementLevel > 60 ? 'High' : movementLevel > 30 ? 'Medium' : 'Low'
                };
            }

            processSimulatedFrame() {
                if (!this.isRunning) return;

                this.frameCount++;

                // Simulate detection data with safe defaults
                const simulatedResult = {
                    stats: {
                        facesDetected: Math.floor(Math.random() * 3),
                        eyesDetected: Math.floor(Math.random() * 6),
                        handsDetected: Math.floor(Math.random() * 4),
                        totalFramesProcessed: this.frameCount,
                        currentMovementLevel: Math.random() * 100,
                        movementDetected: Math.random() > 0.3,
                        textDetected: Math.random() > 0.8,
                        expressionsDetected: Math.random() > 0.5,
                        gesturesDetected: Math.random() > 0.6
                    },
                    faceExpressions: Math.random() > 0.3 ? [{
                        dominantEmotion: ['Happy', 'Sad', 'Angry', 'Surprised', 'Neutral'][Math.floor(Math.random() * 5)],
                        emotions: {
                            happy: Math.random(),
                            sad: Math.random(),
                            angry: Math.random(),
                            surprised: Math.random(),
                            neutral: Math.random(),
                            fear: Math.random(),
                            disgust: Math.random()
                        }
                    }] : [],
                    handGestures: Math.random() > 0.5 ? [{
                        type: ['Open', 'Closed', 'Pointing', 'Thumbs Up', 'Peace'][Math.floor(Math.random() * 5)],
                        confidence: Math.random(),
                        handedness: ['Left', 'Right'][Math.floor(Math.random() * 2)],
                        meaning: 'Simulated gesture'
                    }] : [],
                    vitalMetrics: {
                        heartRate: Math.floor(60 + Math.random() * 40),
                        stressLevel: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)],
                        attentionScore: Math.floor(50 + Math.random() * 50),
                        engagementLevel: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)]
                    },
                    capturedText: Math.random() > 0.8 ? 'Sample detected text from simulation mode' : null
                };

                this.updateDisplay(simulatedResult);
                this.drawDetectionOverlays(simulatedResult);
            }

            updateSimulatedStats() {
                const stats = {
                    facesDetected: Math.floor(Math.random() * 3),
                    eyesDetected: Math.floor(Math.random() * 6),
                    handsDetected: Math.floor(Math.random() * 4),
                    totalFramesProcessed: this.frameCount,
                    currentMovementLevel: Math.random() * 100
                };
                this.updateStatistics(stats);
                this.updateSidebarStats(stats);
            }

            stopDetection() {
                this.isRunning = false;
                this.updateProcessingStatus('idle');

                if (this.processingInterval) {
                    clearInterval(this.processingInterval);
                    this.processingInterval = null;
                }

                if (this.statsInterval) {
                    clearInterval(this.statsInterval);
                    this.statsInterval = null;
                }

                if (this.fpsInterval) {
                    clearInterval(this.fpsInterval);
                    this.fpsInterval = null;
                }

                if (this.video.srcObject) {
                    this.video.srcObject.getTracks().forEach(track => track.stop());
                    this.video.srcObject = null;
                }

                this.updateUIState(false);
                this.updateSystemStatus('ready');
                this.updateCameraStatus('offline');
                this.addNotification('Advanced Analysis System Stopped', 'warning');
                this.addLog('Real-time processing stopped', 'info');

                // Clear active detections
                this.activeDetections.clear();
                this.updateActiveDetections();
                this.clearVideoOverlay();

                // Show camera permission prompt
                document.getElementById('cameraPermissionPrompt').style.display = 'flex';
            }

            safeUpdateElement(id, value, defaultValue = '0') {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value !== undefined && value !== null ? value : defaultValue;
                }
            }

            safeUpdateElementContent(id, content) {
                const element = document.getElementById(id);
                if (element && content !== undefined && content !== null) {
                    element.textContent = content;
                }
            }

            safeUpdateStyle(id, property, value) {
                const element = document.getElementById(id);
                if (element) {
                    element.style[property] = value;
                }
            }

            updateDisplay(result) {
                if (!result) return;

                this.updateStatistics(result.stats || {});
                this.updateMovementMeter(result.stats?.currentMovementLevel || 0);
                this.updateActiveDetections();
                this.updateFPSDisplay();
                this.updateCameraStability(result.stats?.currentMovementLevel || 0);

                // Enhanced data processing
                if (result.faceExpressions) {
                    this.updateExpressionAnalysis(result.faceExpressions);
                }

                if (result.handGestures) {
                    this.updateGestureAnalysis(result.handGestures);
                }

                if (result.eyeMovements) {
                    this.updateEyeMovementAnalysis(result.eyeMovements);
                }

                if (result.vitalMetrics) {
                    this.updateVitalMetrics(result.vitalMetrics);
                }

                if (result.notifications && result.notifications.length > 0) {
                    result.notifications.forEach(notification => this.addNotification(notification.message, notification.type));
                }

                if (result.logs && result.logs.length > 0) {
                    result.logs.forEach(log => this.addLog(log.message, log.type));
                }

                if (result.capturedText) {
                    this.updateCapturedText(result.capturedText);
                }

                // Update sidebar stats
                this.updateSidebarStats(result.stats || {});

                // Update activity timeline
                this.updateActivityTimeline(result.stats || {});
            }

            updateCameraStability(movementLevel) {
                // Calculate camera stability based on movement (inverse relationship)
                const stability = Math.max(0, 100 - (movementLevel || 0) * 0.8);
                this.cameraStability = stability;

                this.safeUpdateElement('stabilityValue', stability.toFixed(0) + '%');
                this.safeUpdateStyle('stabilityMeter', 'width', stability + '%');

                const cameraStatusLabel = document.getElementById('cameraStatusLabel');
                if (cameraStatusLabel) {
                    if (stability > 80) {
                        cameraStatusLabel.textContent = 'Camera is stable';
                        cameraStatusLabel.className = 'text-success';
                    } else if (stability > 60) {
                        cameraStatusLabel.textContent = 'Camera is moderately stable';
                        cameraStatusLabel.className = 'text-warning';
                    } else {
                        cameraStatusLabel.textContent = 'Camera is unstable';
                        cameraStatusLabel.className = 'text-danger';
                    }
                }
            }

            drawDetectionOverlays(result) {
                const overlay = document.getElementById('videoOverlay');
                if (!overlay) return;

                overlay.innerHTML = '';

                if (result.detections) {
                    // Draw face markers with expressions
                    if (result.detections.faces) {
                        result.detections.faces.forEach((face, index) => {
                            const marker = this.createDetectionMarker(face.bbox, 'face', `Face ${index + 1} - ${face.expression || 'Neutral'}`);
                            overlay.appendChild(marker);
                        });
                    }

                    // Draw eye markers with movement
                    if (result.detections.eyes) {
                        result.detections.eyes.forEach((eye, index) => {
                            const marker = this.createDetectionMarker(eye.bbox, 'eye', `Eye - ${eye.state || 'Open'}`);
                            overlay.appendChild(marker);
                        });
                    }

                    // Draw hand markers with gestures
                    if (result.detections.hands) {
                        result.detections.hands.forEach((hand, index) => {
                            const marker = this.createDetectionMarker(hand.bbox, 'hand', `Hand - ${hand.gesture || 'Unknown'}`);
                            overlay.appendChild(marker);
                        });
                    }

                    // Draw text regions
                    if (result.detections.textRegions) {
                        result.detections.textRegions.forEach((text, index) => {
                            const marker = this.createDetectionMarker(text.bbox, 'text', `Text: ${text.content}`);
                            overlay.appendChild(marker);
                        });
                    }
                }
            }

            createDetectionMarker(bbox, type, label) {
                const marker = document.createElement('div');
                marker.className = `detection-marker ${type}-marker`;
                marker.style.left = `${bbox?.x || 0}px`;
                marker.style.top = `${bbox?.y || 15}px`;
                marker.style.width = `${bbox?.width || 150}px`;
                marker.style.height = `${bbox?.height || 150}px`;

                // Add label
                const labelElement = document.createElement('div');
                labelElement.className = 'marker-label';
                labelElement.textContent = label;

                marker.appendChild(labelElement);
                return marker;
            }

            clearVideoOverlay() {
                const overlay = document.getElementById('videoOverlay');
                if (overlay) overlay.innerHTML = '';
            }

            updateExpressionAnalysis(expressions) {
                const container = document.getElementById('expressionAnalysis');
                if (!container) return;

                if (!expressions || expressions.length === 0) {
                    container.innerHTML = `
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-user fa-3x mb-3"></i>
                            <p>No face detected for expression analysis</p>
                        </div>
                    `;
                    return;
                }

                let html = '';
                expressions.forEach((expression, index) => {
                    html += `
                        <div class="expression-card">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="text-white mb-0">Face ${index + 1}</h6>
                                <span class="badge bg-primary">${expression.dominantEmotion}</span>
                            </div>
                            ${Object.entries(expression.emotions).map(([emotion, confidence]) => `
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="text-light text-capitalize">${emotion}</span>
                                        <span class="text-warning">${(confidence * 100).toFixed(1)}%</span>
                                    </div>
                                    <div class="expression-bar">
                                        <div class="expression-fill" style="width: ${confidence * 100}%; background: ${this.getEmotionColor(emotion)};"></div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                });

                container.innerHTML = html;
            }

            getEmotionColor(emotion) {
                const colors = {
                    'happy': '#10b981',
                    'sad': '#3b82f6',
                    'angry': '#ef4444',
                    'surprised': '#f59e0b',
                    'neutral': '#6b7280',
                    'fear': '#8b5cf6',
                    'disgust': '#84cc16'
                };
                return colors[emotion] || '#6366f1';
            }

            updateGestureAnalysis(gestures) {
                const container = document.getElementById('gestureAnalysis');
                const historyContainer = document.getElementById('gestureHistory');

                if (!container) return;

                if (!gestures || gestures.length === 0) {
                    container.innerHTML = `
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-hand fa-3x mb-3"></i>
                            <p>No hand gestures detected</p>
                        </div>
                    `;
                    return;
                }

                let html = '';
                gestures.forEach((gesture, index) => {
                    html += `
                        <div class="gesture-card">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="text-white mb-0">Hand ${index + 1}</h6>
                                <span class="badge bg-warning">${gesture.type}</span>
                            </div>
                            <div class="text-light">
                                <div class="mb-1">Confidence: <span class="text-warning">${((gesture.confidence || 0) * 100).toFixed(1)}%</span></div>
                                <div class="mb-1">Handedness: <span class="text-info">${gesture.handedness}</span></div>
                                ${gesture.meaning ? `<div>Meaning: <span class="text-muted">${gesture.meaning}</span></div>` : ''}
                            </div>
                        </div>
                    `;

                    // Add to gesture history
                    if (historyContainer) {
                        const timestamp = new Date().toLocaleTimeString();
                        const historyItem = document.createElement('div');
                        historyItem.className = 'log-entry';
                        historyItem.innerHTML = `
                            <i class="fas fa-hand me-2 text-warning"></i>
                            <span class="text-muted">[${timestamp}]</span>
                            <span class="ms-2">${gesture.handedness} hand: ${gesture.type}</span>
                        `;
                        historyContainer.appendChild(historyItem);

                        // Keep history manageable
                        if (historyContainer.children.length > 20) {
                            historyContainer.removeChild(historyContainer.firstChild);
                        }
                    }
                });

                container.innerHTML = html;
            }

            updateEyeMovementAnalysis(eyeMovements) {
                if (eyeMovements && eyeMovements.length > 0) {
                    this.addLog(`Eye movements detected: ${eyeMovements.length} points tracked`, 'info');
                }
            }

            updateVitalMetrics(metrics) {
                this.vitalMetrics = { ...this.vitalMetrics, ...metrics };

                // Update UI elements
                if (metrics.heartRate) {
                    const element = document.getElementById('heartRate');
                    if (element) element.textContent = `${metrics.heartRate} BPM`;
                }
                if (metrics.stressLevel) {
                    const element = document.getElementById('stressLevel');
                    if (element) {
                        element.textContent = metrics.stressLevel;
                        element.className = `metric-value ${this.getStressLevelClass(metrics.stressLevel)}`;
                    }
                }
                if (metrics.attentionScore) {
                    const element = document.getElementById('attentionScore');
                    if (element) element.textContent = `${metrics.attentionScore}%`;
                }
                if (metrics.engagementLevel) {
                    const element = document.getElementById('engagementLevel');
                    if (element) element.textContent = metrics.engagementLevel;
                }
            }

            getStressLevelClass(level) {
                const levels = {
                    'Low': 'text-success',
                    'Medium': 'text-warning',
                    'High': 'text-danger',
                    'Very High': 'text-danger'
                };
                return levels[level] || 'text-muted';
            }

            updateActivityTimeline(stats) {
                if (!this.activityTimeline) return;

                const now = new Date().toLocaleTimeString('en-US', { hour12: false });

                // Add current movement level to timeline
                this.activityHistory.push({
                    time: now,
                    movement: stats.currentMovementLevel || 0
                });

                // Keep only last 20 data points
                if (this.activityHistory.length > 20) {
                    this.activityHistory.shift();
                }

                // Update chart
                this.activityTimeline.data.labels = this.activityHistory.map(item => item.time.split(':').slice(1).join(':'));
                this.activityTimeline.data.datasets[0].data = this.activityHistory.map(item => item.movement);
                this.activityTimeline.update();
            }

            updateFPS() {
                this.currentFps = this.frameCount;
                this.frameCount = 0;
            }

            updateFPSDisplay() {
                const liveFps = document.getElementById('liveFps');
                const fps = document.getElementById('fps');

                if (liveFps) liveFps.textContent = `${this.currentFps} FPS`;
                if (fps) fps.textContent = this.currentFps.toFixed(1);
            }

            updateStatistics(stats = {}) {
                this.safeUpdateElement('faceCount', stats.facesDetected);
                this.safeUpdateElement('eyeCount', stats.eyesDetected);
                this.safeUpdateElement('handCount', stats.handsDetected);
                this.safeUpdateElement('totalFrames', (stats.totalFramesProcessed || 0).toLocaleString());

                // Update active detections
                this.activeDetections.clear();
                if ((stats.facesDetected || 0) > 0) this.activeDetections.add('face');
                if ((stats.eyesDetected || 0) > 0) this.activeDetections.add('eye');
                if ((stats.handsDetected || 0) > 0) this.activeDetections.add('hand');
                if (stats.movementDetected) this.activeDetections.add('movement');
                if (stats.textDetected) this.activeDetections.add('text');
                if (stats.expressionsDetected) this.activeDetections.add('expression');
                if (stats.gesturesDetected) this.activeDetections.add('gesture');

                this.updateActiveDetections();
            }

            updateSidebarStats(stats = {}) {
                this.safeUpdateElement('sidebarFaces', stats.facesDetected);
                this.safeUpdateElement('sidebarEyes', stats.eyesDetected);
                this.safeUpdateElement('sidebarHands', stats.handsDetected);
                this.safeUpdateElement('sidebarMovement', (stats.currentMovementLevel || 0).toFixed(0) + '%');
            }

            updateMovementMeter(movementLevel) {
                const movementLevelNormalized = Math.min(100, Math.max(0, movementLevel || 0));

                this.safeUpdateStyle('movementMeter', 'width', movementLevelNormalized + '%');
                this.safeUpdateElement('movementValue', movementLevelNormalized.toFixed(1) + '%');

                // Update color based on intensity
                const meter = document.getElementById('movementMeter');
                if (meter) {
                    if (movementLevelNormalized < 10) {
                        meter.style.background = 'linear-gradient(90deg, #4cc9f0, #4895ef)';
                    } else if (movementLevelNormalized < 30) {
                        meter.style.background = 'linear-gradient(90deg, #4895ef, #4361ee)';
                    } else if (movementLevelNormalized < 50) {
                        meter.style.background = 'linear-gradient(90deg, #4361ee, #f8961e)';
                    } else {
                        meter.style.background = 'linear-gradient(90deg, #f8961e, #f72585)';
                    }
                }
            }

            updateActiveDetections() {
                const container = document.getElementById('activeDetections');
                if (!container) return;

                container.innerHTML = '';

                const detectionTypes = {
                    'face': { name: 'Faces', icon: 'user', class: 'face-badge' },
                    'eye': { name: 'Eyes', icon: 'eye', class: 'eye-badge' },
                    'hand': { name: 'Hands', icon: 'hand-paper', class: 'hand-badge' },
                    'movement': { name: 'Movement', icon: 'running', class: 'movement-badge' },
                    'text': { name: 'Text', icon: 'font', class: 'text-badge' },
                    'expression': { name: 'Expressions', icon: 'smile', class: 'expression-badge' },
                    'gesture': { name: 'Gestures', icon: 'hand-rock', class: 'gesture-badge' }
                };

                this.activeDetections.forEach(detection => {
                    const type = detectionTypes[detection];
                    if (type) {
                        const badge = document.createElement('span');
                        badge.className = `detection-badge ${type.class}`;
                        badge.innerHTML = `<i class="fas fa-${type.icon} me-1"></i>${type.name}`;
                        container.appendChild(badge);
                    }
                });

                if (this.activeDetections.size === 0) {
                    container.innerHTML = '<span class="text-muted">No active detections</span>';
                }
            }

            updateFPSDisplay() {
                this.safeUpdateElement('liveFps', this.currentFps + ' FPS');
                this.safeUpdateElement('fps', this.currentFps.toFixed(1));
            }

            updateCapturedText(text) {
                const container = document.getElementById('capturedTextContent');
                if (!container) return;

                const timestamp = new Date().toLocaleTimeString();

                container.innerHTML = `
                    <div class="mb-2">
                        <small class="text-muted">[${timestamp}]</small>
                    </div>
                    <div class="p-2 bg-dark rounded">
                        <p class="mb-0">${this.escapeHtml(text)}</p>
                    </div>
                `;
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            async updateStats() {
                if (!this.isRunning) return;

                try {
                    const response = await fetch(`/api/detection/stats/${this.sessionId}`);
                    if (response.ok) {
                        const stats = await response.json();
                        this.updateStatistics(stats);
                        this.updateSidebarStats(stats);
                    }
                } catch (error) {
                    // Only log errors that aren't related to simulation mode
                    if (!error.message.includes('Failed to fetch')) {
                        this.addLog('Stats update error: ' + error.message, 'error');
                    }
                    // In simulation mode, we don't need to show stats update errors
                }
            }

            async updateSettings() {
                const settings = {
                    enableFaceDetection: document.getElementById('enableFaceDetection')?.checked || true,
                    enableEyeDetection: document.getElementById('enableEyeDetection')?.checked || true,
                    enableHandDetection: document.getElementById('enableHandDetection')?.checked || true,
                    enableMovementDetection: document.getElementById('enableMovementDetection')?.checked || true,
                    enableTextDetection: document.getElementById('enableTextDetection')?.checked || true,
                    movementThreshold: parseInt(document.getElementById('sensitivityRange')?.value) || 50
                };

                try {
                    await fetch(`/api/detection/settings/${this.sessionId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(settings)
                    });
                    this.addLog('Detection settings updated', 'info');
                } catch (error) {
                    // Silently fail in simulation mode
                }
            }

            addNotification(message, type = 'info') {
                const notifications = document.getElementById('notifications');
                if (!notifications) return;

                const timestamp = new Date().toLocaleTimeString();

                const notification = document.createElement('div');
                notification.className = `notification-item alert alert-${type} alert-dismissible fade show`;
                notification.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <small class="text-muted">[${timestamp}]</small>
                            <span class="ms-2">${message}</span>
                        </div>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert"></button>
                    </div>
                `;

                notifications.appendChild(notification);
                notifications.scrollTop = notifications.scrollHeight;

                this.notificationCount++;
                const notificationCount = document.getElementById('notificationCount');
                if (notificationCount) notificationCount.textContent = this.notificationCount;

                // Auto-remove after 8 seconds
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                        this.notificationCount = Math.max(0, this.notificationCount - 1);
                        if (notificationCount) notificationCount.textContent = this.notificationCount;
                    }
                }, 8000);
            }

            addLog(message, type = 'info') {
                const logs = document.getElementById('logs');
                if (!logs) return;

                const timestamp = new Date().toLocaleTimeString();
                const typeIcon = {
                    'info': 'info-circle',
                    'success': 'check-circle',
                    'warning': 'exclamation-triangle',
                    'error': 'times-circle'
                }[type] || 'info-circle';

                const log = document.createElement('div');
                log.className = 'log-entry';
                log.innerHTML = `
                    <i class="fas fa-${typeIcon} text-${type} me-2"></i>
                    <span class="text-muted">[${timestamp}]</span>
                    <span class="ms-2">${message}</span>
                `;

                logs.appendChild(log);
                logs.scrollTop = logs.scrollHeight;

                this.logCount++;
                const logCount = document.getElementById('logCount');
                if (logCount) logCount.textContent = this.logCount;

                if (logs.children.length > 50) {
                    logs.removeChild(logs.firstChild);
                }
            }

            updateUIState(isRunning) {
                const startBtn = document.getElementById('startBtn');
                const stopBtn = document.getElementById('stopBtn');

                if (startBtn) startBtn.disabled = isRunning;
                if (stopBtn) stopBtn.disabled = !isRunning;
            }

            updateSystemStatus(status) {
                const indicator = document.getElementById('systemStatus');
                const text = document.getElementById('systemStatusText');

                const statusConfig = {
                    'ready': { class: 'status-online', text: 'READY' },
                    'initializing': { class: 'status-processing', text: 'INITIALIZING' },
                    'running': { class: 'status-online pulse', text: 'RUNNING' },
                    'error': { class: 'status-offline', text: 'ERROR' }
                };

                const config = statusConfig[status] || { class: 'status-offline', text: 'OFFLINE' };
                if (indicator) indicator.className = `status-indicator ${config.class}`;
                if (text) text.textContent = config.text;
            }

            updateCameraStatus(status) {
                const indicator = document.getElementById('cameraStatus');
                const text = document.getElementById('cameraStatusText');

                const statusConfig = {
                    'offline': { class: 'status-offline', text: 'OFFLINE' },
                    'connecting': { class: 'status-processing', text: 'CONNECTING' },
                    'connected': { class: 'status-online', text: 'CONNECTED' },
                    'error': { class: 'status-offline', text: 'ERROR' }
                };

                const config = statusConfig[status] || { class: 'status-offline', text: 'OFFLINE' };
                if (indicator) indicator.className = `status-indicator ${config.class}`;
                if (text) text.textContent = config.text;
            }

            updateProcessingStatus(status) {
                const indicator = document.getElementById('processingStatus');
                const text = document.getElementById('processingStatusText');

                const statusConfig = {
                    'idle': { class: 'status-offline', text: 'IDLE' },
                    'active': { class: 'status-online pulse', text: 'ACTIVE' },
                    'error': { class: 'status-offline', text: 'ERROR' }
                };

                const config = statusConfig[status] || { class: 'status-offline', text: 'IDLE' };
                if (indicator) indicator.className = `status-indicator ${config.class}`;
                if (text) text.textContent = config.text;
            }

            async cleanup() {
                this.stopDetection();
                try {
                    await fetch(`/api/detection/cleanup/${this.sessionId}`, { method: 'POST' });
                    this.addLog('Session cleanup completed', 'info');
                } catch (error) {
                    console.error('Error cleaning up session:', error);
                }
            }

            async exportData() {
                const exportData = {
                    sessionId: this.sessionId,
                    timestamp: new Date().toISOString(),
                    duration: Date.now() - this.sessionStartTime,
                    detections: {
                        faces: this.faceExpressions,
                        hands: this.handGestures,
                        eyes: this.eyeMovements,
                        text: this.capturedTexts
                    },
                    vitalMetrics: this.vitalMetrics,
                    activityHistory: this.activityHistory,
                    cameraStability: this.cameraStability
                };

                const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `ai-vision-analysis-${this.sessionId}.json`;
                a.click();
                URL.revokeObjectURL(url);

                this.addNotification('Analysis data exported successfully', 'success');
            }

            clearLogs() {
                const logsContainer = document.getElementById('logs');
                if (logsContainer) {
                    logsContainer.innerHTML = '';
                    this.logCount = 0;
                    const logCount = document.getElementById('logCount');
                    if (logCount) logCount.textContent = '0';
                    this.addLog('Logs cleared', 'info');
                }
            }
        }

        // Initialize the detection system when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Update session ID display
            document.getElementById('sessionIdDisplay').textContent =
                'session_' + Date.now().toString().substring(7);

            // Uptime counter
            setInterval(() => {
                const uptime = Date.now() - (Date.now() - 300000); // 5 minutes ago for demo
                const hours = Math.floor(uptime / 3600000);
                const minutes = Math.floor((uptime % 3600000) / 60000);
                const seconds = Math.floor((uptime % 60000) / 1000);
                document.getElementById('uptimeDisplay').textContent =
                    `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }, 1000);

            // Initialize detection system
            window.detectionSystem = new RealTimeDetection();

            window.addEventListener('beforeunload', function() {
                if (window.detectionSystem) {
                    window.detectionSystem.cleanup();
                }
            });
        });
    </script>
</body>
</html>